#!/bin/zsh

# ANSI colors for functions
## clear all
clear='\e[0m'
## text standard
black='\e[0;30m'; red='\e[0;31m'; green='\e[0;32m'; yellow='\e[0;33m'; blue='\e[0;34m'; purple='\e[0;35m'; cyan='\e[0;36m'; white='\e[0;37m'
## text bold
blackb='\e[1;30m'; redb='\e[1;31m'; greenb='\e[1;32m'; yellowb='\e[1;33m'; blueb='\e[1;34m'; purpleb='\e[1;35m'; cyanb='\e[1;36m'; whiteb='\e[1;37m'
## text intensive
blacki='\e[0;90m'; redi='\e[0;91m'; greeni='\e[0;92m'; yellowi='\e[0;93m'; bluei='\e[0;94m'; purplei='\e[0;95m'; cyani='\e[0;96m'; whitei='\e[0;97m'
## text bold intensive
blackbi='\e[1;90m'; redbi='\e[1;91m'; greenbi='\e[1;92m'; yellowbi='\e[1;93m'; bluebi='\e[1;94m'; purplebi='\e[1;95m'; cyanbi='\e[1;96m'; whitebi='\e[1;97m'
## background standard
bgblack='\e[40m'; bgred='\e[41m'; bggreen='\e[42m'; bgyellow='\e[43m'; bgblue='\e[44m'; bgpurple='\e[45m'; bgcyan='\e[46m'; bgwhite='\e[47m'
## background intensive
bgblacki='\e[0;100m'; bgredi='\e[0;101m'; bggreeni='\e[0;102m'; bgyellowi='\e[0;103m'; bgbluei='\e[0;104m'; bgpurplei='\e[0;105m'; bgcyani='\e[0;106m'; bgwhitei='\e[0;107m'

# apt unattended quiet install
function aptinstall() {
    if [[ "$(isinstalled needrestart)" == "yes" ]]; then
        needrestart-quiet
    fi
    export NEEDRESTART_MODE=a 
    export DEBIAN_FRONTEND=noninteractive
    aptopt='-qq'
    grpopt='-Eiv'
    filter='^needrestart|^update|^reading|^building|^scanning|^\(|^\s*$'
    sudo apt-get install $aptopt $@ | grep $grpopt $filter
    if [[ "$(isinstalled needrestart)" == "yes" ]]; then
        needrestart-verbose
    fi
}

# Execute external script
function extscript() {
    /bin/bash -c "$(curl -fsSL $1)"
}

# Source external file
function extsource() {
    source /dev/stdin <<< "$(curl -fsSL $1)"
}

# Get SHELL name
function get_shell() {
    echo $SHELL | xargs basename
}

function command_exists() {
   type "$1" &>/dev/null
}

# Check if programm is installed
function isinstalled() {
    test=$(which $1 | grep -o "/$1")
    if [[ "$test" == "/$1" ]]; then
        echo 'yes'
    else
        echo 'no'
    fi
}

# Check if package is installed by Brew
function isinstalledbybrew() {
    brew list $1 &>/dev/null
    if [ $? -eq 0 ]; then
        echo 'yes'
    else
        echo 'no'
    fi
}

# Remove target and create symlink
function lnf() {
    if [[ ! -r $1 ]]; then
        echo "$1 is not readable"
        return 1
    fi
    if [[ -r $2 ]]; then
        rm -r $2
        echo "removed $2"
    fi
    ln -sfF $1 $2
    echo "symlink $2 → $1 created"
}

# Create dir and enter it
function mdcd() {
    mkdir -p $1 && cd $_
}

# Display OS name
function osname() {
    if [[ -f /etc/os-release ]]; then
        osid=$(cat /etc/os-release | grep "^ID=")
        osname=${osid:3}
    elif [[ -d /System/iOSSupport ]]; then
        osname='macos'
    else
        osname='unknown'
    fi
    osname=$(echo $osname | awk '{print tolower($0)}' | awk '{ gsub(/ /,""); print }')
    printf $osname
}

# modify /etc/needrestart/needrestart.conf
# use: needrestart-mod parameter value
if [[ "$(osname)" == "ubuntu" ]]; then
    function needrestart-mod() {
        filename=/etc/needrestart/needrestart.conf
        sudo sed -i "s/^#\?\s\?\$nrconf{$1}.*/\$nrconf{$1} = $2;/" $filename
    }
    function needrestart-quiet() {
        needrestart-mod verbosity 0
        needrestart-mod systemctl_combine 0
        needrestart-mod kernelhints 0
        needrestart-mod ucodehints 0
    }
    function needrestart-verbose() {
        needrestart-mod verbosity 1
        needrestart-mod systemctl_combine 1
        needrestart-mod kernelhints 1
        needrestart-mod ucodehints 1
    }
fi

# Print yellow header
function printhead() {
    output="\n${yellowb}"$*"${clear}\n"
    printf "$output"
}

# Print green info
function printinfo() {
    output="${greenb}"$*"${clear}\n"
    printf "$output"
}

# Search man with fzf
function fman() {
    man -k . | fzf -q "$1" --prompt='man> '  --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ", $2} {print $1}\' | xargs -r man | col -bx | bat -l man -p --color always' | tr -d '()' | awk '{printf "%s ", $2} {print $1}' | xargs -r man
}

# Universal type command for Ubuntu and MacOS
function utype() {
    if [[ -z $1 ]]; then
        echo 'cmdtype: no command specified'
        return 1
    else
        if [[ $(osname) == 'ubuntu' ]]; then
            output=$(type -t $1)
        elif [[ $(osname) == 'macos' ]]; then
            tp=$(type $1)
            if [[ $(echo $tp | \grep -o 'is /') ]]; then
                output='file'
            elif [[ $(echo $tp | \grep -o 'alias') ]]; then
                output='alias'
            elif [[ $(echo $tp | \grep -o 'shell function') ]]; then
                output='function'
            elif [[ $(echo $tp | \grep -o 'reserved') ]]; then
                output='keyword'
            elif [[ $(echo $tp | \grep -o 'builtin') ]]; then
                output='builtin'
            fi
        else
            echo 'cmdtype: unsupported os'
            return 1
        fi
    fi
    echo $output
}

# Short version info, usage: verinfo cliname appname versioncommand
# Example: verinfo gzip "GNU Zip" --version
function verinfo() {
    if [[ -z "$1" ]]; then
        echo -e "usage:$green verinf$clear cliname appname versioncommand"
        return 1
    elif [[ ! -z "$4" ]]; then
        echo -e "too many parameters"
        return 1
    elif [[ -z "$2" ]]; then
        cliname=$1
        appname=$1
        vercmmd="--version"
    elif [[ -z "$3" ]]; then
        cliname=$1
        appname=$2
        vercmmd="--version"
    else
        cliname=$1
        appname=$2
        vercmmd=$3
    fi
    type=$(utype $cliname)
    if [[ $type = 'file' || "$(which $cliname)" == /* ]]; then
        msg='is installed in'
        reg='\b[0-9]{1,}\.[0-9]{1,}(\.[0-9]{1,}){0,}\b'
        app="${green}${appname}${clear}"
        ver="$yellow$($cliname $vercmmd | grep -Eo $reg | head -1)$clear"
        pth="$purple$(whereis -b $cliname | sed 's/.*: //')$clear"
        echo -e "$app $ver $msg $pth"
    fi
    if [[ $type = 'alias' ]]; then
        msg='is an alias for'
        als="${green}$cliname${clear} $msg ${purple}$(alias $cliname | sed "s/.*=//")${clear}"
        echo -e "$als"
    fi
    if [[ $type = 'function' || $type = 'keyword' || $type = 'builtin' ]]; then
        msg='is a'
        als="${green}$cliname${clear} $msg ${purple}$type${clear}"
        echo -e "$als"
    fi    
    if [[ -z $type ]]; then
        msg="is not available"
        echo -e "${red}$cliname${clear} $msg"
        return 2
    fi
}

function makeconfln() {
    if [[ -L $CONFDIR/$1 ]] && [[ "$(readlink $CONFDIR/$1)" = "$GHCONFDIR/$1" ]]; then
        echo "symlink $CONFDIR/$1 → $GHCONFDIR/$1 exists"
    else
        if [[ -a $CONFDIR/$1 ]]; then
            echo "removing file or folder $CONFDIR/$1"
            rm -r $CONFDIR/$1
        fi
        ln -sfF $GHCONFDIR/$1 $CONFDIR/$1
        echo "symlink $CONFDIR/$1 → $GHCONFDIR/$1 created"
    fi
}

export ZSH_FUNCTIONS_LOADED=true